#!/usr/bin/env bash

set -e

commandToRun=$1;shift;

case "${commandToRun}" in
    init-dev)
        ( cd services/madoc;
            mdkir -p ./.omeka;
            ( cd ./.omeka;
                git clone https://github.com/digirati-co-uk/omeka-s.git --branch bugfix/7.2-rebase-1.3.0 --depth 1
            );

            ( cd packages;
                git clone https://github.com/digirati-co-uk/iiif-php.git --branch feature/expanded-api --depth 1
            );

            ## Install vendors for development
            rm ./composer.json;
            rm ./composer.lock;
            rm -rf ./vendor;
            cp ./config/composer.json ./composer.json;
            php ./config/patch-composer.php;
            composer install --no-dev --no-scripts --optimize-autoloader;
        )
    ;;

    up)
         docker-compose up -d "$@"
    ;;

    refresh-gateway)
      docker-compose stop gateway
      docker-compose rm -f gateway
      docker-compose up --no-deps --no-recreate -d gateway
    ;;

    e2e)
      FIXTURE_DIRECTORY='./e2e/cypress/fixtures/madoc-test-fixtures';
      if [ -d "$FIXTURE_DIRECTORY" ]; then
          echo "$FIXTURE_DIRECTORY exists, skipping clone."
      else
          (cd ./e2e/cypress/fixtures/;
            git clone https://github.com/digirati-co-uk/madoc-test-fixtures.git
          )
          echo "$FIXTURE_DIRECTORY does not exist."
      fi
      rm -rf ./var/test-environment
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.e2e.yml -p test-madoc --env-file ./.env-test rm -f -v -s
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -p test-madoc --env-file ./.env-test up -d
      MAX_TRIES=30
      SECONDS_BETWEEN_CHECKS=5
      while [[ ${MAX_TRIES} -gt 0 ]]
      do
        STATUS=$(curl -sS "http://localhost:8988/" --output /dev/null --write-out '%{http_code}' 2>&1)
        if [[ ${STATUS} -eq 200 ]]; then
          break;
        else
          echo "Waiting for services to start..."
          MAX_TRIES=$((MAX_TRIES - 1))
        fi
        sleep ${SECONDS_BETWEEN_CHECKS};
      done
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.e2e.yml -p test-madoc --env-file ./.env-test run e2e && RET_CODE=$? || RET_CODE=$?
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.e2e.yml -p test-madoc --env-file ./.env-test down
      exit $RET_CODE;
    ;;

    test-instance)
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -p test-madoc --env-file ./.env-test up "$@"
    ;;

    test-compose)
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -p test-madoc --env-file ./.env-test "$@"
    ;;

    test-instance-dump-omeka)
      if [[ -z "$1" ]]; then
        echo -e "You must pass in a table to export"
      fi;
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -p test-madoc --env-file ./.env-test exec madoc-database env MYSQL_PWD=Password123 /usr/bin/mysqldump -u omeka_s omeka_s $1 --skip-comments --no-tablespaces > ./e2e/test-fixtures/omeka/$1.sql
    ;;

    test-instance-dump-postgres)
      if [[ -z "$1" ]]; then
        echo -e "You must pass in a schema to export"
      fi;
      if [[ -z "$2" ]]; then
        echo -e "You must pass in a table to export"
      fi;
      docker-compose -f docker-compose.yml -f docker-compose.test.yml -p test-madoc --env-file ./.env-test exec shared-postgres \
       pg_dump -n $1 -t $1.$2 -U postgres postgres > ./e2e/test-fixtures/postgres/$1-$2.sql
    ;;

    start)
         docker-compose build --parallel
         docker-compose up -d "$@"
    ;;

    stop)
         docker-compose stop "$@"
    ;;

    restart)
        docker-compose restart "$@"
    ;;

    down)
        docker-compose down "$@"
    ;;

    logs)
        docker-compose logs -f --tail=50
    ;;

    reload-gateway)
      curl -H "x-tyk-authorization: y@@-rwzsqsqTRcuJjp6L8" http://localhost:8888/tyk/reload
    ;;

    *)

    echo
    echo
    echo "   Madoc command line helpers"
    echo
    echo
    echo "Available commands:"
    echo
    echo "  init-dev                  Initialise dev environment"
    echo "  start                     Starts up fresh set of docker containers (detached)"
    echo "  stop                      Stops all containers"
    echo "  up                        Start all containers"
    echo "  down                      Stop all containers if running and remove all containers"
    echo "  restart                   Restarts all containers"
    echo "  rebuild                   Rebuilds all containers"
    echo "  logs                      Show and tail the logs in the docker containers"
esac
